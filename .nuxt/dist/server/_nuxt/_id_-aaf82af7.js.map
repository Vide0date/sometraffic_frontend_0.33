{"version":3,"file":"_id_-aaf82af7.js","sources":["../../../../pages/users/[id].vue"],"sourcesContent":["<template>\n  <div>\n    <div id=\"last-users\">\n      <h1 class=\"font-bold py-4 uppercase text-center\">Update User</h1>\n      <form v-on:submit.prevent>\n        <div class=\"overflow-hidden shadow sm:rounded-md\">\n          <div class=\"px-4 py-5 sm:p-6 w-full md:w-2/4 m-auto sm:w-full\">\n            <div class=\"grid grid-cols-6 gap-6\">\n              <div class=\"col-span-10 sm:col-span-12\">\n                <label\n                  for=\"userName\"\n                  class=\"block text-sm font-medium text-gray-700\"\n                  >First name</label\n                >\n                <input\n                  type=\"text\"\n                  v-model=\"form.userName\"\n                  id=\"userName\"\n                  class=\"bg-[#dddddd] h-10 py-2 px-3 text-gray-900 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-800 focus:ring-indigo-500 sm:text-sm\"\n                  required\n                />\n              </div>\n\n              <div class=\"col-span-10 sm:col-span-12\">\n                <label\n                  for=\"email\"\n                  class=\"block text-sm font-medium text-gray-700\"\n                  >Email address</label\n                >\n                <input\n                  type=\"text\"\n                  v-model=\"form.email\"\n                  id=\"email\"\n                  class=\"bg-[#dddddd] h-10 py-2 px-3 text-gray-900 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-800 focus:ring-indigo-500 sm:text-sm\"\n                  required\n                />\n              </div>\n              <div class=\"col-span-10 sm:col-span-12\">\n                <label\n                  for=\"password\"\n                  class=\"block text-sm font-medium text-gray-700\"\n                  >Password</label\n                >\n                <input\n                  type=\"password\"\n                  v-model=\"form.password\"\n                  id=\"password\"\n                  class=\"bg-[#dddddd] h-10 py-2 px-3 text-gray-900 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-800 focus:ring-indigo-500 sm:text-sm\"\n                  placeholder=\"New Password\"\n                />\n              </div>\n\n              <div class=\"col-span-10 sm:col-span-12\">\n                <label\n                  for=\"userType\"\n                  class=\"block text-sm font-medium text-gray-700\"\n                  >User Type</label\n                >\n                <select\n                  id=\"userType\"\n                  v-model=\"form.userType\"\n                  autocomplete=\"userType\"\n                  class=\"bg-[#dddddd] h-10 py-2 px-3 text-gray-900 mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-gray-800 focus:outline-none focus:ring-indigo-500 sm:text-sm\"\n                  required\n                >\n                  <option value=\"\">Select</option>\n                  <option value=\"Administrator\">Administrator</option>\n                  <option value=\"User\">User</option>\n                </select>\n              </div>\n\n              <div class=\"col-span-10 sm:col-span-12\">\n                <label\n                  for=\"userType\"\n                  class=\"block text-sm font-medium text-gray-700\"\n                  >Account</label\n                >\n                <select\n                  id=\"Account\"\n                  v-model=\"form.AccountId\"\n                  autocomplete=\"Account\"\n                  class=\"bg-[#dddddd] h-10 py-2 px-3 text-gray-900 mt-1 block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:border-gray-800 focus:outline-none focus:ring-indigo-500 sm:text-sm\"\n                  required\n                >\n                  <option value=\"null\">Select</option>\n                  <option\n                    v-for=\"account in accounts\"\n                    :key=\"account.id\"\n                    :value=\"account.id\"\n                  >\n                    {{ account.name }}\n                  </option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div\n            class=\"px-4 py-3 text-right sm:px-6 w-full md:w-2/4 m-auto sm:w-full\"\n          >\n            <button\n              @click.prevent=\"updateUser\"\n              class=\"bg-[#bcbcbc] inline-flex justify-center rounded-md border border-transparent py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n            >\n              Update\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script setup>\ndefinePageMeta({\n  middleware: [\"auth\", \"admin\"],\n})\nconst AWN = inject(\"$awn\")\nconst config = useRuntimeConfig()\nconst { id } = await useRoute().params\nconst form = reactive({\n  id: id,\n  userName: \"\",\n  email: \"\",\n  password: \"\",\n  userType: \"\",\n  AccountId: null,\n})\nconst accounts = ref([])\n\n// fetch the product\nconst { data: user } = await useFetch(`${config.API_BASE_URL}users/${id}`, {\n  key: id,\n})\n// console.log('user value', user.value)\nif (user.value) {\n  form.id = user.value.id\n  form.userName = user.value.userName\n  form.email = user.value.email\n  form.userType = user.value.userType\n  form.AccountId = user.value.AccountId\n}\n\nconst updateUser = async () => {\n  let u_data = {\n    id: form.id,\n    userName: form.userName,\n    email: form.email,\n    password: form.password,\n    userType: form.userType,\n    AccountId: form.AccountId\n  }\n  const { data, error } = await useFetch(\n    `${config.API_BASE_URL}users/update/${id}`,\n    {\n      method: \"PUT\",\n      params: { id: id },\n      body: u_data,\n    }\n  )\n  if (data.value) {\n    console.log(\"data value\", data.value.message)\n    await AWN.success(data.value.message)\n    navigateTo(\"/users\")\n  }\n  if (error.value) {\n    await AWN.alert(error.value.statusMessage)\n  }\n  // console.log('form value', form)\n  // location.assign('/users')\n}\n// const { data: users } = await useFetch('http://localhost:1111/api/users/all')\nconst setAccounts = async () => {\n  const { data: data } = await useFetch(`${config.API_BASE_URL}accounts/all`)\n  accounts.value = data.value\n}\nonBeforeMount(setAccounts)\n\n</script>\n\n<style scoped></style>\n"],"names":["_withAsyncContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAoHA,WAAA,MAAA;AACA,UAAA,SAAA,iBAAA;AACA,UAAA,EAAA,GAAA,KAAqB,CAAA,QAAA,SAAA,IAAAA,iBAAA,MAAA,SAAA,EAAA,MAAA;AACrB,UAAA,OAAA,SAAA;AAAA,MACA;AAAA,MACA,UAAA;AAAA,MACA,OAAA;AAAA,MACA,UAAA;AAAA,MACA,UAAA;AAAA,MACA,WAAA;AAAA,IACA,CAAA;AACA,UAAA,WAAA,IAAA,EAAA;AAGA,UAAA,EAAA,MAAA,KAAA;MACA,KAAA;AAAA,IACA,GAAA,aAAA,CAAA;AAEA,QAAA,KAAA,OAAA;AACA,WAAA,KAAA,KAAA,MAAA;AACA,WAAA,WAAA,KAAA,MAAA;AACA,WAAA,QAAA,KAAA,MAAA;AACA,WAAA,WAAA,KAAA,MAAA;AACA,WAAA,YAAA,KAAA,MAAA;AAAA,IACA;;;;;;;;;;;;;;;;"}
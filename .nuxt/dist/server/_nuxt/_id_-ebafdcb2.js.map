{"version":3,"file":"_id_-ebafdcb2.js","sources":["../../../../pages/f/[id].vue"],"sourcesContent":["<template>\n  <Head v-if=\"redirect?.length > 0\">\n    <Title>Some Traffic | {{ redirect[0]?.seo_title }}</Title>\n    <!-- Open Graph Meta Tags -->\n    <Meta property=\"og:title\" :content=\"redirect[0]?.seo_title\" />\n    <Meta property=\"og:description\" :content=\"redirect[0].seo_description\" />\n    <Meta property=\"og:image\" :content=\"redirect[0].seo_image_url\" />\n    <Meta property=\"og:url\" :content=\"fullpath\" />\n    <Meta property=\"og:type\" content=\"Some traffic web app\" />\n  </Head>\n\n  <div>\n    <div class=\"w-screen h-screen rounded-xl p-8 flex justify-center m-auto\">\n      <div class=\"space-y-8 flex justify-center m-auto object-center\">\n        <span class=\"inline-flex tracking\" v-if=\"flaq.redirect_flaq == true\">\n          <Loader />\n        </span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useRouter } from \"vue-router\";\n// import { useScreen } from \"vue-screen\";\n\ndefinePageMeta({\n  layout: \"front\",\n});\n\nconst route = useRoute();\nconst router = useRouter();\n// const screen = useScreen();\nconst config = useRuntimeConfig();\n\nconst params = route.params;\nconst query = route.query;\nconst redirect = ref([]);\nconst destination = ref(\"\");\n// const screenWidth = screen.width;\n// const screenHeight = screen.height;\n\nconst flaq = reactive({ redirect_flaq: false });\n\nconst path = config.BASE_URL + route.fullPath;\nconst fullpath = path.split(\"?\")[0];\n\nconsole.log(\"Full Path: \", path);\nif (params.id && params.id.length === 7) {\n  if (query.fbclid) {\n    console.log(\"Save it.\");\n  } else {\n    console.log(\"Redirect it or show preview or do nothing.\");\n    await useFetch(`${config.API_BASE_URL}trackingurl/get-meta`, {\n      method: \"POST\",\n      body: {\n        tracking_url: fullpath,\n      },\n    })\n      .then((result) => {\n        if (result.data.value) {\n          redirect.value = result.data.value;\n          destination.value = result.data.value[0].destination_url;\n          if (\n            !destination.value.includes(\"http\") ||\n            !destination.value.includes(\"https\")\n          ) {\n            destination.value = \"https://\" + destination.value;\n          }\n\n          // router.push({\n          //   path: \"/_r\",\n          //   query: {\n          //     title: result.data.value[0].seo_title,\n          //     description: result.data.value[0].seo_description,\n          //     image: result.data.value[0].seo_image_url,\n          //   },\n          // });\n        }\n        if (result.error.value) {\n          console.log(\"Error no result\", result.error);\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error useFetch: \", error);\n      });\n\n    \n  }\n  console.log(\"Redirect: \", redirect);\n}\nonMounted(async () => {\n    const screenWidth = screen.width;\n    const screenHeight = screen.height;\n    console.log('screenHeight', screenHeight);\n    console.log('screenWidth', screenWidth);\n    let network_speed = \"\";\n    if (navigator.connection) {\n      const connection = navigator.connection;\n      const speedMbps = connection.downlink; // Get the estimated download speed in Mbps\n      network_speed = speedMbps + \" Mbps\";\n      console.log(\"Internet speed is \" + speedMbps + \" Mbps\");\n    } else {\n      console.log(\"navigator.connection is not available\");\n    }\n\n    await useLazyAsyncData(\"mountains\", () => _);\n\n    await useFetch(`${config.API_BASE_URL}trackingurl/redirect`, {\n      method: \"POST\",\n      body: {\n        id: params.id,\n        tracking_url: fullpath,\n        screen_resolution: screenWidth + \"x\" + screenHeight,\n        network_speed,\n        referrer_url: document.referrer,\n      },\n    })\n      .catch((error) => {\n        console.log(\"Error useFetch: \", error);\n      });\n  window.location.assign(destination.value);\n});\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,UAAA,QAAA,SAAA;AACA,cAAA;AAEA,UAAA,SAAA,iBAAA;AAEA,UAAA,SAAA,MAAA;AACA,UAAA,QAAA,MAAA;AACA,UAAA,WAAA,IAAA,CAAA,CAAA;AACA,UAAA,cAAA,IAAA,EAAA;AAIA,UAAA,OAAA,SAAA,EAAA,eAAA,MAAA,CAAA;AAEA,UAAA,OAAA,OAAA,WAAA,MAAA;AACA,UAAA,WAAA,KAAA,MAAA,GAAA,EAAA,CAAA;AAEA,YAAA,IAAA,eAAA,IAAA;AACA,QAAA,OAAA,MAAA,OAAA,GAAA,WAAA,GAAA;AACA,UAAA,MAAA,QAAA;AACA,gBAAA,IAAA,UAAA;AAAA,MACA,OAAA;AACA,gBAAA,IAAA,4CAAA;AACA;UACA,QAAA;AAAA,UACA,MAAA;AAAA,YACA,cAAA;AAAA,UACA;AAAA,QACA,GAAA,aAAA,EACA,KAAA,CAAA,WAAA;AACA,cAAA,OAAA,KAAA,OAAA;AACA,qBAAA,QAAA,OAAA,KAAA;AACA,wBAAA,QAAA,OAAA,KAAA,MAAA,CAAA,EAAA;AACA,gBACA,CAAA,YAAA,MAAA,SAAA,MAAA,KACA,CAAA,YAAA,MAAA,SAAA,OAAA,GACA;AACA,0BAAA,QAAA,aAAA,YAAA;AAAA,YACA;AAAA,UAUA;AACA,cAAA,OAAA,MAAA,OAAA;AACA,oBAAA,IAAA,mBAAA,OAAA,KAAA;AAAA,UACA;AAAA,QACA,CAAA,EACA,MAAA,CAAA,UAAA;AACA,kBAAA,IAAA,oBAAA,KAAA;AAAA,QACA,CAAA,CAAA;MAGA;AACA,cAAA,IAAA,cAAA,QAAA;AAAA,IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
{"version":3,"file":"index-edc7e2d3.js","sources":["../../../../components/Login.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"flex justify-center w-full items-center\">\n      <div\n        v-if=\"hasError\"\n        class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative w-full mb-6\"\n        role=\"alert\"\n      >\n        <strong class=\"font-bold\">Oops, try again! </strong>\n        <span class=\"block sm:inline\">{{ errorMessage }}</span>\n        <span class=\"absolute top-0 bottom-0 right-0 px-4 py-3\">\n          <svg\n            class=\"fill-current h-6 w-6 text-red-500\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 20 20\"\n          >\n            <title>Close</title>\n            <path\n              d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\"\n            />\n          </svg>\n        </span>\n      </div>\n    </div>\n\n    <!-- component -->\n    <form v-on:submit.prevent>\n      <div class=\"flex justify-center w-full items-center\">\n        <div class=\"w-96 flex flex-col items-center\">\n          <!-- text login -->\n          <h1 class=\"text-center text-2xl font-bold text-gray-600 mb-4\">\n            Member's Login\n          </h1>\n\n          <!-- email input -->\n          <div class=\"w-full mb-4\">\n            <input\n              type=\"email\"\n              v-model=\"form.email\"\n              id=\"email\"\n              class=\"text-black w-full py-4 px-8 bg-slate-200 placeholder:font-semibold rounded hover:ring-1 focus:text-black outline-blue-500\"\n              placeholder=\"Your Email\"\n              required\n            />\n          </div>\n          <!-- password input -->\n          <div class=\"w-full mb-4\">\n            <input\n              type=\"password\"\n              v-model=\"form.password\"\n              id=\"password\"\n              class=\"text-black w-full py-4 px-8 bg-slate-200 placeholder:font-semibold rounded hover:ring-1 focus:text-black outline-blue-500\"\n              placeholder=\"Password\"\n              required\n            />\n          </div>\n          <!-- button -->\n          <div class=\"w-full\">\n            <button\n              @click.prevent=\"loginForm\"\n              :disabled=\"form.password == '' && form.email == ''\"\n              class=\"py-4 bg-blue-400 w-full rounded text-blue-50 font-bold hover:bg-blue-700\"\n            >\n              Sign in\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script setup>\nconst Swal = inject(\"$swal\");\nconst AWN = inject(\"$awn\");\n\nconst config = useRuntimeConfig();\nconst hasError = ref(null);\nconst errorMessage = ref(null);\nconst accounts = ref([]);\nconst account = ref({});\nconst form = reactive({\n  email: \"\",\n  password: \"\",\n});\nconst loginForm = async () => {\n  let login_data = { email: form.email, password: form.password };\n  const { data, error } = await useFetch(`${config.API_BASE_URL}auth/signin`, {\n    key: login_data.email,\n    method: \"POST\",\n    body: login_data,\n  });\n  if (data.value) {\n    hasError.value = false;\n    localStorage.setItem(\"user\", JSON.stringify(data.value));\n    localStorage.setItem(\"authToken\", data.value.accessToken);\n    if(data.value.userType === 'Administrator'){\n                console.log('admin', accounts.value);\n                await setAccounts()\n                accounts.value[0].id\n                localStorage.setItem(\"activeAccount\", accounts.value[0].id)\n                localStorage.setItem(\"activeAccountData\", JSON.stringify(accounts.value[0]))\n              }else {\n                console.log('not admin');\n                console.log(accounts.value);\n                localStorage.setItem(\"activeAccount\", data.value.AccountId)\n                const activeAccountData = await getAccount(data.value.AccountId)\n\n                localStorage.setItem(\"activeAccountData\", JSON.stringify(account.value))\n            }\n    navigateTo(\"/dashboard\");\n    // console.log('localStorage user', user);\n  }\n  if (error.value) {\n    hasError.value = true;\n    let err_code = error.value.statusCode;\n    errorMessage.value =\n      err_code == 404\n        ? \"You didn't have any account\"\n        : err_code == 401\n        ? \"Email or Password incorrect!\"\n        : error.value.statusMessage;\n    // AWN.alert(errorMessage.value);\n    console.log(\"response error\", error.value.statusMessage);\n  }\n};\nconst setAccounts = async () => {\n  const { data: data } = await useFetch(`${config.API_BASE_URL}accounts/all`)\n  accounts.value = data.value\n}\n\nconst getAccount = async (id) => {\n  const { data: data } = await useFetch(`${config.API_BASE_URL}accounts/${id}`)\n  account.value = data.value\n}\n\n</script>\n\n<style scoped></style>"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAyEA,WAAA,OAAA;AACA,WAAA,MAAA;AAEA,qBAAA;AACA,UAAA,WAAA,IAAA,IAAA;AACA,UAAA,eAAA,IAAA,IAAA;AACA,QAAA,EAAA;AACA,QAAA,EAAA;AACA,UAAA,OAAA,SAAA;AAAA,MACA,OAAA;AAAA,MACA,UAAA;AAAA,IACA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
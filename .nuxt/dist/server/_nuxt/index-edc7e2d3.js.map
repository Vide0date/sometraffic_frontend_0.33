{"version":3,"file":"index-edc7e2d3.js","sources":["../../../../components/Login.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"flex justify-center w-full items-center\">\r\n      <div\r\n        v-if=\"hasError\"\r\n        class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative w-full mb-6\"\r\n        role=\"alert\"\r\n      >\r\n        <strong class=\"font-bold\">Oops, try again! </strong>\r\n        <span class=\"block sm:inline\">{{ errorMessage }}</span>\r\n        <span class=\"absolute top-0 bottom-0 right-0 px-4 py-3\">\r\n          <svg\r\n            class=\"fill-current h-6 w-6 text-red-500\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 20 20\"\r\n          >\r\n            <title>Close</title>\r\n            <path\r\n              d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\"\r\n            />\r\n          </svg>\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- component -->\r\n    <form v-on:submit.prevent>\r\n      <div class=\"flex justify-center w-full items-center\">\r\n        <div class=\"w-96 flex flex-col items-center\">\r\n          <!-- text login -->\r\n          <h1 class=\"text-center text-2xl font-bold text-gray-600 mb-4\">\r\n            Member's Login\r\n          </h1>\r\n\r\n          <!-- email input -->\r\n          <div class=\"w-full mb-4\">\r\n            <input\r\n              type=\"email\"\r\n              v-model=\"form.email\"\r\n              id=\"email\"\r\n              class=\"text-black w-full py-4 px-8 bg-slate-200 placeholder:font-semibold rounded hover:ring-1 focus:text-black outline-blue-500\"\r\n              placeholder=\"Your Email\"\r\n              required\r\n            />\r\n          </div>\r\n          <!-- password input -->\r\n          <div class=\"w-full mb-4\">\r\n            <input\r\n              type=\"password\"\r\n              v-model=\"form.password\"\r\n              id=\"password\"\r\n              class=\"text-black w-full py-4 px-8 bg-slate-200 placeholder:font-semibold rounded hover:ring-1 focus:text-black outline-blue-500\"\r\n              placeholder=\"Password\"\r\n              required\r\n            />\r\n          </div>\r\n          <!-- button -->\r\n          <div class=\"w-full\">\r\n            <button\r\n              @click.prevent=\"loginForm\"\r\n              :disabled=\"form.password == '' && form.email == ''\"\r\n              class=\"py-4 bg-blue-400 w-full rounded text-blue-50 font-bold hover:bg-blue-700\"\r\n            >\r\n              Sign in\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nconst Swal = inject(\"$swal\");\r\nconst AWN = inject(\"$awn\");\r\n\r\nconst config = useRuntimeConfig();\r\nconst hasError = ref(null);\r\nconst errorMessage = ref(null);\r\nconst accounts = ref([]);\r\nconst account = ref({});\r\nconst form = reactive({\r\n  email: \"\",\r\n  password: \"\",\r\n});\r\nconst loginForm = async () => {\r\n  let login_data = { email: form.email, password: form.password };\r\n  const { data, error } = await useFetch(`${config.API_BASE_URL}auth/signin`, {\r\n    key: login_data.email,\r\n    method: \"POST\",\r\n    body: login_data,\r\n  });\r\n  if (data.value) {\r\n    hasError.value = false;\r\n    localStorage.setItem(\"user\", JSON.stringify(data.value));\r\n    localStorage.setItem(\"authToken\", data.value.accessToken);\r\n    if(data.value.userType === 'Administrator'){\r\n                console.log('admin', accounts.value);\r\n                await setAccounts()\r\n                accounts.value[0].id\r\n                localStorage.setItem(\"activeAccount\", accounts.value[0].id)\r\n                localStorage.setItem(\"activeAccountData\", JSON.stringify(accounts.value[0]))\r\n              }else {\r\n                console.log('not admin');\r\n                console.log(accounts.value);\r\n                localStorage.setItem(\"activeAccount\", data.value.AccountId)\r\n                const activeAccountData = await getAccount(data.value.AccountId)\r\n\r\n                localStorage.setItem(\"activeAccountData\", JSON.stringify(account.value))\r\n            }\r\n    navigateTo(\"/dashboard\");\r\n    // console.log('localStorage user', user);\r\n  }\r\n  if (error.value) {\r\n    hasError.value = true;\r\n    let err_code = error.value.statusCode;\r\n    errorMessage.value =\r\n      err_code == 404\r\n        ? \"You didn't have any account\"\r\n        : err_code == 401\r\n        ? \"Email or Password incorrect!\"\r\n        : error.value.statusMessage;\r\n    // AWN.alert(errorMessage.value);\r\n    console.log(\"response error\", error.value.statusMessage);\r\n  }\r\n};\r\nconst setAccounts = async () => {\r\n  const { data: data } = await useFetch(`${config.API_BASE_URL}accounts/all`)\r\n  accounts.value = data.value\r\n}\r\n\r\nconst getAccount = async (id) => {\r\n  const { data: data } = await useFetch(`${config.API_BASE_URL}accounts/${id}`)\r\n  account.value = data.value\r\n}\r\n\r\n</script>\r\n\r\n<style scoped></style>"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAyEA,WAAA,OAAA;AACA,WAAA,MAAA;AAEA,qBAAA;AACA,UAAA,WAAA,IAAA,IAAA;AACA,UAAA,eAAA,IAAA,IAAA;AACA,QAAA,EAAA;AACA,QAAA,EAAA;AACA,UAAA,OAAA,SAAA;AAAA,MACA,OAAA;AAAA,MACA,UAAA;AAAA,IACA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}